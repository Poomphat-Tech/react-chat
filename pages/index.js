import Head from "next/head";
import Image from "next/image";
import { useState, useEffect, Fragment } from "react";
import io from "socket.io-client";
import styles from "@chatscope/chat-ui-kit-styles/dist/default/styles.min.css";
import {
  MainContainer,
  ChatContainer,
  MessageList,
  Message,
  MessageInput,
  Sidebar,
  Search,
  ConversationList,
  Conversation,
  Avatar,
  ConversationHeader,
  VoiceCallButton,
  VideoCallButton,
  InfoButton,
  TypingIndicator,
  MessageSeparator,
  ExpansionPanel,
} from "@chatscope/chat-ui-kit-react";

const socket = io.connect("http://localhost:3000", {
  reconnection: true,
  reconnectionDelay: 1000,
  reconnectionDelayMax: 5000,
  reconnectionAttempts: Infinity,
});
export default function Home() {
  const [isConnected, setIsConnected] = useState(false);
  const [socketId, setSocketId] = useState(socket.id);
  const [msgList, setMsgList] = useState([]);
  const [messageInputValue, setMessageInputValue] = useState("");

  useEffect(() => {
    socket.on("connect", () => {
      console.log("connected", socket.id);
      setIsConnected(true);
    });
    return () => {
      socket.off("connect");
      socket.off("disconnect");
    };
  }, []);
  useEffect(() => {
    if (!socket.connected) {
      console.log("socket error");
      return;
    }
    setIsConnected(true);
    socket.on("reconnect", () => {
      console.log("reconnect");
      console.log(socket.id);
      setIsConnected(true);
    });
    socket.on("connect_failed", () => {
      console.log("connection fail");
    });
    socket.on("reconnect_error", () => {
      console.log("connection reconnect_error");
    });
    socket.on("disconnect", () => {
      setIsConnected(false);
    });
  }, [socket.connected]);
  useEffect(() => {
    console.log("socket status", isConnected);
    console.log("socket id", socketId);
    if (!isConnected) {
      return;
    }
    socket.on("serverToClient", (result) => {
      setMsgList((msgList) => [...msgList, result]);
    });
  }, [isConnected]);

  const onMessageSendHandler = async (msg) => {
    const payload = msg;
    const msgObject = { msg: msg, direction: "outgoing" };
    socket.emit("clientToServer", payload, (result) => {
      console.log("server response", result);
      setMsgList((msgList) => [...msgList, msgObject]);
      setMessageInputValue("");
    });
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        style={{
          height: "600px",
          position: "relative",
        }}
      >
        <MainContainer responsive>
          <Sidebar position="left" scrollable={false}>
            <Search placeholder="Search..." />
            <ConversationList>
              <Conversation
                name="Lilly"
                lastSenderName="Lilly"
                info="Yes i can do it for you"
              >
                <Avatar
                  src={"/images/avatar/avatar1.svg"}
                  name="Lilly"
                  status="available"
                />
              </Conversation>

              <Conversation
                name="Joe"
                lastSenderName="Joe"
                info="Yes i can do it for you"
              >
                <Avatar
                  src={"/images/avatar/avatar2.svg"}
                  name="Joe"
                  status="dnd"
                />
              </Conversation>
            </ConversationList>
          </Sidebar>
          <ChatContainer>
            <ConversationHeader>
              <ConversationHeader.Back />
              <Avatar src={"/images/avatar/avatar1.svg"} name="Zoe" />
              <ConversationHeader.Content
                userName="Zoe"
                info="Active 10 mins ago"
              />
              <ConversationHeader.Actions>
                <VoiceCallButton />
                <VideoCallButton />
                <InfoButton />
              </ConversationHeader.Actions>
            </ConversationHeader>
            <MessageList
              // typingIndicator={<TypingIndicator content="Zoe is typing" />}
            >
              {/* <MessageSeparator content="Saturday, 30 November 2019" /> */}

              {msgList.map((value, index) => (
                <Message
                  key={index}
                  model={{
                    message: `${value.msg}`,
                    sentTime: "15 mins ago",
                    sender: "Zoe",
                    direction: `${
                      value.direction == "incoming" ? "incoming" : "outgoing"
                    }`,
                    position: "single",
                  }}
                >
                  {value.direction == "incoming" && (
                    <Avatar src={"/images/avatar/avatar1.svg"} name="Zoe" />
                  )}
                </Message>
              ))}
            </MessageList>
            <MessageInput
              placeholder="Type message here"
              value={messageInputValue}
              onChange={(val) => setMessageInputValue(val)}
              onSend={(val) => onMessageSendHandler(val)}
            />
          </ChatContainer>
          <Sidebar position="right">
            <ExpansionPanel open title="INFO">
              <p>Lorem ipsum</p>
              <p>Lorem ipsum</p>
              <p>Lorem ipsum</p>
              <p>Lorem ipsum</p>
            </ExpansionPanel>
            <ExpansionPanel title="LOCALIZATION">
              <p>Lorem ipsum</p>
              <p>Lorem ipsum</p>
              <p>Lorem ipsum</p>
              <p>Lorem ipsum</p>
            </ExpansionPanel>
          </Sidebar>
        </MainContainer>
      </div>
    </div>
  );
}
